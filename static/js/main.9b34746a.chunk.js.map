{"version":3,"sources":["logo.svg","SelectSearchBar.js","BarChart.js","App.js","reportWebVitals.js","index.js"],"names":["SelectSearchBar","loadOptions","inputText","a","fetch","response","json","options","className","cacheOptions","defaultOptions","value","this","props","selectedValue","onInputChange","handleInputChange","onChange","handleChange","Component","BarChart","data","labels","datasets","barPercentage","length","backgroundColor","indexAxis","height","width","maintainAspectRatio","plugins","legend","display","App","convertDateFormat","date_arr","split","parseInt","substring","handlePredictButtonPress","event","preventDefault","state","fighter1SelectedValue","alert","fighter2SelectedValue","isNaN","parseFloat","fighter1Odds","indexOf","fighter2Odds","toFixed","console","log","setState","winner","probability","handleFighter1OddsChange","target","handleFighter2OddsChange","handleFighter1InputChange","fighter1InputValue","handleFighter2InputChange","fighter2InputValue","handleFighter1Change","fighter1BodyStrPerc","fighter1ClinchStrPerc","fighter1CtrlPerc","fighter1DOB","fighter1DistanceStrPerc","fighter1GroundStrPerc","fighter1HeadStrPerc","fighter1Height","fighter1KDAvg","fighter1LastFight","fighter1LegStrPerc","fighter1RD","fighter1Rating","fighter1Reach","fighter1RevAvg","fighter1SApM","fighter1SLpM","fighter1Stance","fighter1StrAtkPerc","fighter1StrDefPerc","fighter1SubAvg","fighter1TDAtkPerc","fighter1TDAvg","fighter1TDDefPerc","handleFighter2Change","fighter2BodyStrPerc","fighter2ClinchStrPerc","fighter2CtrlPerc","fighter2DOB","fighter2DistanceStrPerc","fighter2GroundStrPerc","fighter2HeadStrPerc","fighter2Height","fighter2KDAvg","fighter2LastFight","fighter2LegStrPerc","fighter2RD","fighter2Rating","fighter2Reach","fighter2RevAvg","fighter2SApM","fighter2SLpM","fighter2Stance","fighter2StrAtkPerc","fighter2StrDefPerc","fighter2SubAvg","fighter2TDAtkPerc","fighter2TDAvg","fighter2TDDefPerc","hendleInputChange","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b34746a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport AsyncSelect from 'react-select/async'\r\n\r\nclass SelectSearchBar extends Component {\r\n\r\n    loadOptions = async (inputText) => {\r\n        if (!inputText) {\r\n            return [];\r\n        }\r\n        \r\n        const response = await fetch('https://mma-fight-predictor.herokuapp.com/api/search/' + inputText);\r\n        const json = await response.json();\r\n        return json.options;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AsyncSelect\r\n                    className=\"Search\"\r\n                    cacheOptions\r\n                    defaultOptions\r\n                    value={this.props.selectedValue}\r\n                    loadOptions={this.loadOptions}\r\n                    onInputChange={this.props.handleInputChange}\r\n                    onChange={this.props.handleChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectSearchBar","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nclass BarChart extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Bar \r\n                    data={{\r\n                        labels: this.props.labels,\r\n                        datasets: [{\r\n                            barPercentage: this.props.labels.length / 11,\r\n                            backgroundColor: '#3369ff',\r\n                            indexAxis: 'y',\r\n                            data: this.props.data\r\n                        }]\r\n                    }}\r\n                    height={360}\r\n                    width={450}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            legend: {\r\n                                display: false\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarChart\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SelectSearchBar from './SelectSearchBar';\r\nimport BarChart from './BarChart';\r\nimport Carousel from 'react-elastic-carousel';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      winner : '',\r\n      probability: '',\r\n\r\n      fighter1InputValue: '',\r\n      fighter1SelectedValue: null,\r\n      fighter1BodyStrPerc: 0,\r\n      fighter1ClinchStrPerc: 0,\r\n      fighter1CtrlPerc: 0,\r\n      fighter1DOB: '',\r\n      fighter1DistanceStrPerc: 0,\r\n      fighter1GroundStrPerc: 0,\r\n      fighter1HeadStrPerc: 0,\r\n      fighter1Height: '',\r\n      fighter1KDAvg: 0,\r\n      fighter1LastFight: '',\r\n      fighter1LegStrPerc: 0,\r\n      fighter1RD: 0,\r\n      fighter1Rating: 0,\r\n      fighter1Reach: '',\r\n      fighter1RevAvg: 0,\r\n      fighter1SApM: 0,\r\n      fighter1SLpM: 0,\r\n      fighter1Stance: '',\r\n      fighter1StrAtkPerc: 0,\r\n      fighter1StrDefPerc: 0,\r\n      fighter1SubAvg: 0,\r\n      fighter1TDAtkPerc: 0,\r\n      fighter1TDAvg: 0,\r\n      fighter1TDDefPerc: 0,\r\n      fighter1Odds: '',\r\n\r\n      fighter2InputValue: '',\r\n      fighter2SelectedValue: null,\r\n      fighter2BodyStrPerc: 0,\r\n      fighter2ClinchStrPerc: 0,\r\n      fighter2CtrlPerc: 0,\r\n      fighter2DOB: '',\r\n      fighter2DistanceStrPerc: 0,\r\n      fighter2GroundStrPerc: 0,\r\n      fighter2HeadStrPerc: 0,\r\n      fighter2Height: '',\r\n      fighter2KDAvg: 0,\r\n      fighter2LastFight: '',\r\n      fighter2LegStrPerc: 0,\r\n      fighter2RD: 0,\r\n      fighter2Rating: 0,\r\n      fighter2Reach: '',\r\n      fighter2RevAvg: 0,\r\n      fighter2SApM: 0,\r\n      fighter2SLpM: 0,\r\n      fighter2Stance: '',\r\n      fighter2StrAtkPerc: 0,\r\n      fighter2StrDefPerc: 0,\r\n      fighter2SubAvg: 0,\r\n      fighter2TDAtkPerc: 0,\r\n      fighter2TDAvg: 0,\r\n      fighter2TDDefPerc: 0,\r\n      fighter2Odds: ''\r\n    }\r\n  }\r\n\r\n  convertDateFormat = value => {\r\n    const date_arr = value.split(\".\")\r\n\r\n    if (date_arr.length > 1) {\r\n      const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n\r\n      const date_day = date_arr[1]\r\n      const date_month = months[parseInt(date_arr[0]) - 1]\r\n      const date_year = date_arr[2].substring(2)\r\n  \r\n      return (date_day + \"-\" + date_month + \"-\" + date_year)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  }\r\n\r\n  handlePredictButtonPress = async (event) => {\r\n    event.preventDefault()\r\n\r\n    if (this.state.fighter1SelectedValue == null) {\r\n      alert(\"Please select a name for fighter 1\")\r\n    }\r\n    else if (this.state.fighter2SelectedValue == null) {\r\n      alert(\"Please select a name for fighter 2\")\r\n    }\r\n    else if (this.state.fighter1SelectedValue.value == this.state.fighter2SelectedValue.value) {\r\n      alert(\"Please ensure that fighter 1 and fighter 2 are different\")\r\n    }\r\n    else if (isNaN(parseFloat(this.state.fighter1Odds)) || this.state.fighter1Odds.indexOf('.') == -1 || parseFloat(this.state.fighter1Odds) <= 1.0) {\r\n      alert(\"Please enter valid decimal odds for fighter 1 (must be a float greater than 1.0)\")\r\n    }\r\n    else if (isNaN(parseFloat(this.state.fighter2Odds)) || this.state.fighter2Odds.indexOf('.') == -1 || parseFloat(this.state.fighter2Odds) <= 1.0) {\r\n      alert(\"Please enter valid decimal odds for fighter 2 (must be a float greater than 1.0)\")\r\n    }\r\n    else {\r\n      const response = await fetch('https://mma-fight-predictor.herokuapp.com/api/predict/' + this.state.fighter1SelectedValue.value + '/' + this.state.fighter2SelectedValue.value + '/' + parseFloat(this.state.fighter1Odds).toFixed(2) + '/' + parseFloat(this.state.fighter2Odds).toFixed(2));\r\n      const json = await response.json();\r\n      console.log(json)\r\n      this.setState({\r\n        winner: json.winner,\r\n        probability: json.probability\r\n      })\r\n    }\r\n  }\r\n\r\n  handleFighter1OddsChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      fighter1Odds: event.target.value\r\n    })\r\n  }\r\n\r\n  handleFighter2OddsChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      fighter2Odds: event.target.value\r\n    })\r\n  }\r\n\r\n  handleFighter1InputChange = value => {\r\n    this.setState({\r\n      fighter1InputValue: value\r\n    })\r\n  }\r\n\r\n  handleFighter2InputChange = value => {\r\n    this.setState({\r\n      fighter2InputValue: value\r\n    })\r\n  }\r\n\r\n  handleFighter1Change = async (value) => {\r\n    this.setState({\r\n      fighter1SelectedValue: value\r\n    })\r\n    \r\n    const response = await fetch('https://mma-fight-predictor.herokuapp.com/api/stats/' + value.value);\r\n    const json = await response.json();\r\n\r\n    this.setState({\r\n        fighter1BodyStrPerc: json['Body Str. %'],\r\n        fighter1ClinchStrPerc: json['Clinch Str. %'],\r\n        fighter1CtrlPerc: json['Ctrl. %'],\r\n        fighter1DOB: json['DOB'],\r\n        fighter1DistanceStrPerc: json['Distance Str. %'],\r\n        fighter1GroundStrPerc: json['Ground Str. %'],\r\n        fighter1HeadStrPerc: json['Head Str. %'],\r\n        fighter1Height: json['Height'],\r\n        fighter1KDAvg: json['KD Avg.'],\r\n        fighter1LastFight: this.convertDateFormat(json['Last Fight']),\r\n        fighter1LegStrPerc: json['Leg Str. %'],\r\n        fighter1RD: json['RD'],\r\n        fighter1Rating: json['Rating'],\r\n        fighter1Reach: json['Reach'],\r\n        fighter1RevAvg: json['Rev. Avg.'],\r\n        fighter1SApM: json['SApM'],\r\n        fighter1SLpM: json['SLpM'],\r\n        fighter1Stance: json['Stance'],\r\n        fighter1StrAtkPerc: json['Str. Atk. %'],\r\n        fighter1StrDefPerc: json['Str. Def. %'],\r\n        fighter1SubAvg: json['Sub. Avg.'],\r\n        fighter1TDAtkPerc: json['TD Atk. %'],\r\n        fighter1TDAvg: json['TD Avg.'],\r\n        fighter1TDDefPerc: json['TD Def. %']\r\n    })\r\n  }\r\n\r\n  handleFighter2Change = async (value) => {\r\n    this.setState({\r\n      fighter2SelectedValue: value,\r\n    })\r\n    \r\n    const response = await fetch('https://mma-fight-predictor.herokuapp.com/api/stats/' + value.value);\r\n    const json = await response.json();\r\n\r\n    this.setState({\r\n      fighter2BodyStrPerc: json['Body Str. %'],\r\n      fighter2ClinchStrPerc: json['Clinch Str. %'],\r\n      fighter2CtrlPerc: json['Ctrl. %'],\r\n      fighter2DOB: json['DOB'],\r\n      fighter2DistanceStrPerc: json['Distance Str. %'],\r\n      fighter2GroundStrPerc: json['Ground Str. %'],\r\n      fighter2HeadStrPerc: json['Head Str. %'],\r\n      fighter2Height: json['Height'],\r\n      fighter2KDAvg: json['KD Avg.'],\r\n      fighter2LastFight: this.convertDateFormat(json['Last Fight']),\r\n      fighter2LegStrPerc: json['Leg Str. %'],\r\n      fighter2RD: json['RD'],\r\n      fighter2Rating: json['Rating'],\r\n      fighter2Reach: json['Reach'],\r\n      fighter2RevAvg: json['Rev. Avg.'],\r\n      fighter2SApM: json['SApM'],\r\n      fighter2SLpM: json['SLpM'],\r\n      fighter2Stance: json['Stance'],\r\n      fighter2StrAtkPerc: json['Str. Atk. %'],\r\n      fighter2StrDefPerc: json['Str. Def. %'],\r\n      fighter2SubAvg: json['Sub. Avg.'],\r\n      fighter2TDAtkPerc: json['TD Atk. %'],\r\n      fighter2TDAvg: json['TD Avg.'],\r\n      fighter2TDDefPerc: json['TD Def. %']\r\n   })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Header\">\r\n          <h3> MMA Fight Predictor </h3>\r\n        </div>\r\n        <div className=\"Info\">\r\n          <p> Created by: Janahan Dhushenthen and Jordan Schneider </p>\r\n          <p> Last updated: 26/06/2021 </p>\r\n        </div>\r\n\r\n        <div className=\"Row\">\r\n          <div className=\"Card\">\r\n            <h3><b>Fighter 1</b></h3>\r\n\r\n            <SelectSearchBar selectedValue={this.state.fighter1SelectedValue} hendleInputChange={this.handleFighter1InputChange} handleChange={this.handleFighter1Change}></SelectSearchBar>\r\n            \r\n            <form>\r\n              <label> Decimal Fight Odds: </label>\r\n              <input type=\"text\" value={this.state.fighter1Odds} onChange={this.handleFighter1OddsChange}></input>\r\n            </form>\r\n\r\n            <p> Height: {this.state.fighter1Height}\" | Reach: {this.state.fighter1Reach}\" | Stance: {this.state.fighter1Stance} | DOB: {this.state.fighter1DOB} | Last Fight: {this.state.fighter1LastFight} </p>\r\n\r\n            <Carousel>\r\n              <BarChart \r\n                labels={['Rating', 'RD']}\r\n                data={[this.state.fighter1Rating, this.state.fighter1RD]}\r\n              ></BarChart>\r\n              <BarChart \r\n                labels={['SLpM', 'SApM', 'TD Avg.', 'KD Avg.', 'Sub. Avg.', 'Rev. Avg.']}\r\n                data={[this.state.fighter1SLpM, this.state.fighter1SApM, this.state.fighter1TDAvg, this.state.fighter1KDAvg, this.state.fighter1SubAvg, this.state.fighter1RevAvg]}\r\n                ></BarChart>\r\n              <BarChart \r\n                labels={['Str. Atk. %', 'Str. Def. %', 'TD Atk. %', 'TD Def. %', 'Ctrl. %', 'Head Str. %', 'Body Str. %', 'Leg Str. %', 'Distance Str. %', 'Clinch Str. %', 'Ground Str. %']}\r\n                data={[this.state.fighter1StrAtkPerc, this.state.fighter1StrDefPerc, this.state.fighter1TDAtkPerc, this.state.fighter1TDDefPerc, this.state.fighter1CtrlPerc, this.state.fighter1HeadStrPerc, this.state.fighter1BodyStrPerc, this.state.fighter1LegStrPerc, this.state.fighter1DistanceStrPerc, this.state.fighter1ClinchStrPerc, this.state.fighter1GroundStrPerc]}\r\n              ></BarChart>\r\n            </Carousel>\r\n          </div>\r\n\r\n          <div className=\"Card\">\r\n            <h3><b>Fighter 2</b></h3>\r\n\r\n            <SelectSearchBar selectedValue={this.state.fighter2SelectedValue} hendleInputChange={this.handleFighter2InputChange} handleChange={this.handleFighter2Change}></SelectSearchBar>\r\n            \r\n            <form>\r\n              <label> Decimal Fight Odds: </label>\r\n              <input type=\"text\" value={this.state.fighter2Odds} onChange={this.handleFighter2OddsChange}></input>\r\n            </form>\r\n\r\n            <p> Height: {this.state.fighter2Height}\" | Reach: {this.state.fighter2Reach}\" | Stance: {this.state.fighter2Stance} | DOB: {this.state.fighter2DOB} | Last Fight: {this.state.fighter2LastFight} </p>\r\n\r\n            <Carousel>\r\n            <BarChart \r\n                labels={['Rating', 'RD']}\r\n                data={[this.state.fighter2Rating, this.state.fighter2RD]}\r\n              ></BarChart>\r\n              <BarChart \r\n                labels={['SLpM', 'SApM', 'TD Avg.', 'KD Avg.', 'Sub. Avg.', 'Rev. Avg.']}\r\n                data={[this.state.fighter2SLpM, this.state.fighter2SApM, this.state.fighter2TDAvg, this.state.fighter2KDAvg, this.state.fighter2SubAvg, this.state.fighter2RevAvg]}\r\n                ></BarChart>\r\n              <BarChart \r\n                labels={['Str. Atk. %', 'Str. Def. %', 'TD Atk. %', 'TD Def. %', 'Ctrl. %', 'Head Str. %', 'Body Str. %', 'Leg Str. %', 'Distance Str. %', 'Clinch Str. %', 'Ground Str. %']}\r\n                data={[this.state.fighter2StrAtkPerc, this.state.fighter2StrDefPerc, this.state.fighter2TDAtkPerc, this.state.fighter2TDDefPerc, this.state.fighter2CtrlPerc, this.state.fighter2HeadStrPerc, this.state.fighter2BodyStrPerc, this.state.fighter2LegStrPerc, this.state.fighter2DistanceStrPerc, this.state.fighter2ClinchStrPerc, this.state.fighter2GroundStrPerc]}\r\n              ></BarChart>\r\n            </Carousel>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"Row\">\r\n          <div className=\"Card\">\r\n            <p className=\"Winner\">WINNER: {\r\n              this.state.winner != '' && \r\n              <b> {this.state.winner} ({this.state.probability}%) </b>\r\n            }\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"Row\">\r\n          <button className=\"Button\" onClick={this.handlePredictButtonPress}>\r\n            Predict\r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}